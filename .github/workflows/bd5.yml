name: Nuitka 跨平台打包（dlass - AMD+ARM）

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  # Windows 平台（保持稳定，无需修改）
  build-windows:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2022, windows-2022-arm64]
        python-version: ["3.11"]

    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 安装Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install nuitka PySide6 socketio requests

      - name: Nuitka打包（Windows）
        run: |
          $ARCH = if ("${{ matrix.os }}" -eq "windows-2022-arm64") { "arm64" } else { "x86_64" }
          $OUTPUT_NAME = "dlass-windows-$ARCH"
          $SCRIPT_NAME = "app.py"
          
          # 单行命令，无换行符问题
          nuitka --standalone --onefile --windows-disable-console --windows-icon-from-ico=./icon.ico --include-package=PySide6 --include-package=socketio --include-package=requests --output-filename=$OUTPUT_NAME $SCRIPT_NAME

      - name: 上传Windows产物
        uses: actions/upload-artifact@v4
        with:
          name: dlass-windows-builds
          path: ./$OUTPUT_NAME.exe


  # macOS 平台（核心修复：废弃--macos-icon，改用--macos-app-icon）
  build-macos:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-14, macos-14-arm64]
        python-version: ["3.11"]

    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 安装Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: 安装依赖
        run: |
          python3 -m pip install --upgrade pip
          pip3 install nuitka PySide6 socketio requests

      - name: Nuitka打包（macOS - 修复图标参数）
        run: |
          ARCH=$(if [ "${{ matrix.os }}" = "macos-14-arm64" ]; then echo "arm64"; else echo "x86_64"; fi)
          OUTPUT_NAME="dlass-macOS-$ARCH"
          SCRIPT_NAME="app.py"
          
          # 核心修复：--macos-icon → --macos-app-icon（Nuitka新版本兼容参数）
          nuitka \
            --standalone --onefile \
            --macos-app-name=$OUTPUT_NAME \
            --macos-app-icon=./icon.icns \  # 修复后的图标参数
            --include-package=PySide6 \
            --include-package=socketio \
            --include-package=requests \
            --output-filename=$OUTPUT_NAME \
            $SCRIPT_NAME

          # 修复无签名运行问题
          codesign --force --deep --sign - ./$OUTPUT_NAME.app

      - name: 压缩.app
        run: |
          ARCH=$(if [ "${{ matrix.os }}" = "macos-14-arm64" ]; then echo "arm64"; else echo "x86_64"; fi)
          zip -r ./dlass-macOS-$ARCH.zip ./dlass-macOS-$ARCH.app

      - name: 上传macOS产物
        uses: actions/upload-artifact@v4
        with:
          name: dlass-macOS-builds
          path: ./dlass-macOS-$ARCH.zip


  # Linux 平台（保持稳定，无需修改）
  build-linux:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, ubuntu-22.04-arm64]
        python-version: ["3.11"]

    steps:
      - name: 拉取代码
        uses: actions/checkout@v4

      - name: 安装系统依赖
        run: |
          sudo apt-get update
          sudo apt-get install -y libqt6widgets6 libqt6gui6 libqt6core6 libqt6network6 build-essential

      - name: 安装Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: 安装依赖
        run: |
          python3 -m pip install --upgrade pip
          pip3 install nuitka PySide6 socketio requests

      - name: Nuitka打包（Linux）
        run: |
          ARCH=$(if [ "${{ matrix.os }}" = "ubuntu-22.04-arm64" ]; then echo "arm64"; else echo "x86_64"; fi)
          OUTPUT_NAME="dlass-linux-$ARCH"
          SCRIPT_NAME="app.py"
          
          nuitka \
            --standalone --onefile \
            --include-package=PySide6 \
            --include-package=socketio \
            --include-package=requests \
            --output-filename=$OUTPUT_NAME \
            $SCRIPT_NAME

          chmod +x ./$OUTPUT_NAME

      - name: 上传Linux产物
        uses: actions/upload-artifact@v4
        with:
          name: dlass-linux-builds
          path: ./$OUTPUT_NAME
