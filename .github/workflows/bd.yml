name: Build Multi-Platform Executable

on:
  push:
    tags: ['v*']  # 在推送标签时触发构建
  workflow_dispatch:  # 允许手动触发

env:
<<<<<<< HEAD
  APP_NAME: "Dlass"  # 替换为您的应用名称
=======
  APP_NAME: "YourAppName"  # 替换为您的应用名称
>>>>>>> 3a4b4f477279d39d2a60cdd79adeee84e94844a1

jobs:
  # Windows x64
  build-windows-x64:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.10']
<<<<<<< HEAD
=======
        architecture: ['x64']
>>>>>>> 3a4b4f477279d39d2a60cdd79adeee84e94844a1
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }} x64
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        architecture: 'x64'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nuitka pyside6 python-socketio requests

    - name: Build Windows x64 executable
      shell: cmd
      run: |
        python -m nuitka ^
          --standalone ^
          --onefile ^
          --enable-plugin=pyside6 ^
          --include-qt-plugins=all ^
          --include-package=socketio ^
          --include-package=engineio ^
          --include-package=requests ^
          --include-package=urllib3 ^
          --include-package=charset_normalizer ^
          --include-package=idna ^
          --windows-icon-from-ico=assets/icon.ico ^
          --windows-console-mode=disable ^
          --remove-output ^
          --noinclude-pytest-mode=nofollow ^
          --noinclude-unittest-mode=nofollow ^
          --nofollow-imports ^
          --follow-stdlib ^
          --lto=yes ^
          --jobs=4 ^
<<<<<<< HEAD
          --windows-company-name="Cmds Tech" ^
=======
          --windows-company-name="Your Company" ^
>>>>>>> 3a4b4f477279d39d2a60cdd79adeee84e94844a1
          --windows-product-name="${{ env.APP_NAME }}" ^
          --windows-file-version="1.0.0" ^
          --windows-product-version="1.0.0" ^
          --windows-file-description="PySide6 and Socket.IO Application" ^
<<<<<<< HEAD
          --output-filename=${{ env.APP_NAME }}-windows-x64-${{ matrix.python-version }}.exe ^
=======
          --output-filename=${{ env.APP_NAME }}-windows-${{ matrix.python-version }}-${{ matrix.architecture }}.exe ^
>>>>>>> 3a4b4f477279d39d2a60cdd79adeee84e94844a1
          app.py

    - name: Upload Windows x64 artifact
      uses: actions/upload-artifact@v4
      with:
<<<<<<< HEAD
        name: windows-x64-executable
        path: ${{ env.APP_NAME }}-windows-x64-${{ matrix.python-version }}.exe
=======
        name: windows-executable
        path: ${{ env.APP_NAME }}-windows-${{ matrix.python-version }}-${{ matrix.architecture }}.exe
>>>>>>> 3a4b4f477279d39d2a60cdd79adeee84e94844a1

  # Windows ARM64 (通过交叉编译)
  build-windows-arm64:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

<<<<<<< HEAD
    - name: Install cross-compilation tools
      run: |
        sudo apt-get update
        sudo apt-get install -y mingw-w64
=======
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y patchelf

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nuitka pyside6 python-socketio requests
>>>>>>> 3a4b4f477279d39d2a60cdd79adeee84e94844a1

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nuitka pyside6 python-socketio requests

    - name: Build Windows ARM64 executable (交叉编译)
      run: |
        python -m nuitka \
          --standalone \
          --onefile \
          --enable-plugin=pyside6 \
          --include-qt-plugins=all \
          --include-package=socketio \
          --include-package=engineio \
          --include-package=requests \
          --include-package=urllib3 \
          --include-package=charset_normalizer \
          --include-package=idna \
<<<<<<< HEAD
          --mingw64 \
          --windows-dependency-tool=pefile \
          --windows-target-version=10 \
=======
>>>>>>> 3a4b4f477279d39d2a60cdd79adeee84e94844a1
          --remove-output \
          --noinclude-pytest-mode=nofollow \
          --noinclude-unittest-mode=nofollow \
          --nofollow-imports \
          --follow-stdlib \
          --lto=yes \
          --jobs=4 \
<<<<<<< HEAD
          --output-filename=${{ env.APP_NAME }}-windows-arm64-${{ matrix.python-version }}.exe \
=======
          --output-filename=${{ env.APP_NAME }}-linux-${{ matrix.python-version }} \
>>>>>>> 3a4b4f477279d39d2a60cdd79adeee84e94844a1
          app.py

    - name: Upload Windows ARM64 artifact
      uses: actions/upload-artifact@v4
      with:
<<<<<<< HEAD
        name: windows-arm64-executable
        path: ${{ env.APP_NAME }}-windows-arm64-${{ matrix.python-version }}.exe
=======
        name: linux-executable
        path: ${{ env.APP_NAME }}-linux-${{ matrix.python-version }}
>>>>>>> 3a4b4f477279d39d2a60cdd79adeee84e94844a1

  # Linux x64
  build-linux-x64:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y patchelf

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nuitka pyside6 python-socketio requests

    - name: Build Linux x64 executable
      run: |
        python -m nuitka \
          --standalone \
          --onefile \
          --enable-plugin=pyside6 \
          --include-qt-plugins=all \
          --include-package=socketio \
          --include-package=engineio \
          --include-package=requests \
          --include-package=urllib3 \
          --include-package=charset_normalizer \
          --include-package=idna \
          --remove-output \
          --noinclude-pytest-mode=nofollow \
          --noinclude-unittest-mode=nofollow \
          --nofollow-imports \
          --follow-stdlib \
          --lto=yes \
          --jobs=4 \
          --output-filename=${{ env.APP_NAME }}-linux-x64-${{ matrix.python-version }} \
          app.py

    - name: Upload Linux x64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-x64-executable
        path: ${{ env.APP_NAME }}-linux-x64-${{ matrix.python-version }}

  # Linux ARM64
  build-linux-arm64:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y patchelf gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nuitka pyside6 python-socketio requests

    - name: Build Linux ARM64 executable (交叉编译)
      run: |
        # 设置交叉编译环境
        export CC=aarch64-linux-gnu-gcc
        export CXX=aarch64-linux-gnu-g++
        
        python -m nuitka \
          --standalone \
          --onefile \
          --enable-plugin=pyside6 \
          --include-qt-plugins=all \
          --include-package=socketio \
          --include-package=engineio \
          --include-package=requests \
          --include-package=urllib3 \
          --include-package=charset_normalizer \
          --include-package=idna \
          --target-arch=arm64 \
          --remove-output \
          --noinclude-pytest-mode=nofollow \
          --noinclude-unittest-mode=nofollow \
          --nofollow-imports \
          --follow-stdlib \
          --lto=yes \
          --jobs=4 \
          --output-filename=${{ env.APP_NAME }}-linux-arm64-${{ matrix.python-version }} \
          app.py

    - name: Upload Linux ARM64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: linux-arm64-executable
        path: ${{ env.APP_NAME }}-linux-arm64-${{ matrix.python-version }}

  # macOS x86_64
  build-macos-x64:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ['3.10']
<<<<<<< HEAD
=======
        architecture: ['x64']
>>>>>>> 3a4b4f477279d39d2a60cdd79adeee84e94844a1
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nuitka pyside6 python-socketio requests

    - name: Build macOS x86_64 executable
      run: |
        python -m nuitka \
          --standalone \
          --onefile \
          --enable-plugin=pyside6 \
          --include-qt-plugins=all \
          --include-package=socketio \
          --include-package=engineio \
          --include-package=requests \
          --include-package=urllib3 \
          --include-package=charset_normalizer \
          --include-package=idna \
<<<<<<< HEAD
          --macos-target-arch=x86_64 \
=======
          --macos-target-arch=${{ matrix.architecture }} \
>>>>>>> 3a4b4f477279d39d2a60cdd79adeee84e94844a1
          --remove-output \
          --noinclude-pytest-mode=nofollow \
          --noinclude-unittest-mode=nofollow \
          --nofollow-imports \
          --follow-stdlib \
          --lto=yes \
          --jobs=4 \
<<<<<<< HEAD
          --output-filename=${{ env.APP_NAME }}-macos-x64-${{ matrix.python-version }} \
=======
          --output-filename=${{ env.APP_NAME }}-macos-${{ matrix.python-version }}-${{ matrix.architecture }} \
>>>>>>> 3a4b4f477279d39d2a60cdd79adeee84e94844a1
          app.py

    - name: Upload macOS x64 artifact
      uses: actions/upload-artifact@v4
      with:
<<<<<<< HEAD
        name: macos-x64-executable
        path: ${{ env.APP_NAME }}-macos-x64-${{ matrix.python-version }}

  # macOS ARM64
  build-macos-arm64:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ['3.10']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nuitka pyside6 python-socketio requests

    - name: Build macOS ARM64 executable
      run: |
        python -m nuitka \
          --standalone \
          --onefile \
          --enable-plugin=pyside6 \
          --include-qt-plugins=all \
          --include-package=socketio \
          --include-package=engineio \
          --include-package=requests \
          --include-package=urllib3 \
          --include-package=charset_normalizer \
          --include-package=idna \
          --macos-target-arch=arm64 \
          --remove-output \
          --noinclude-pytest-mode=nofollow \
          --noinclude-unittest-mode=nofollow \
          --nofollow-imports \
          --follow-stdlib \
          --lto=yes \
          --jobs=4 \
          --output-filename=${{ env.APP_NAME }}-macos-arm64-${{ matrix.python-version }} \
          app.py

    - name: Upload macOS ARM64 artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-arm64-executable
        path: ${{ env.APP_NAME }}-macos-arm64-${{ matrix.python-version }}

=======
        name: macos-executable
        path: ${{ env.APP_NAME }}-macos-${{ matrix.python-version }}-${{ matrix.architecture }}

>>>>>>> 3a4b4f477279d39d2a60cdd79adeee84e94844a1
  # 创建发布版本
  create-release:
    needs: [build-windows-x64, build-windows-arm64, build-linux-x64, build-linux-arm64, build-macos-x64, build-macos-arm64]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./artifacts/**/*
